// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stats.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Result contains LogQL query statistics.
struct Stats_Result {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var summary: Stats_Summary {
    get {return _storage._summary ?? Stats_Summary()}
    set {_uniqueStorage()._summary = newValue}
  }
  /// Returns true if `summary` has been explicitly set.
  var hasSummary: Bool {return _storage._summary != nil}
  /// Clears the value of `summary`. Subsequent reads from it will return its default value.
  mutating func clearSummary() {_uniqueStorage()._summary = nil}

  var store: Stats_Store {
    get {return _storage._store ?? Stats_Store()}
    set {_uniqueStorage()._store = newValue}
  }
  /// Returns true if `store` has been explicitly set.
  var hasStore: Bool {return _storage._store != nil}
  /// Clears the value of `store`. Subsequent reads from it will return its default value.
  mutating func clearStore() {_uniqueStorage()._store = nil}

  var ingester: Stats_Ingester {
    get {return _storage._ingester ?? Stats_Ingester()}
    set {_uniqueStorage()._ingester = newValue}
  }
  /// Returns true if `ingester` has been explicitly set.
  var hasIngester: Bool {return _storage._ingester != nil}
  /// Clears the value of `ingester`. Subsequent reads from it will return its default value.
  mutating func clearIngester() {_uniqueStorage()._ingester = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Summary is the summary of a query statistics.
struct Stats_Summary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Total bytes processed per second.
  var bytesProcessedPerSecond: Int64 = 0

  /// Total lines processed per second.
  var linesProcessedPerSecond: Int64 = 0

  /// Total bytes processed.
  var totalBytesProcessed: Int64 = 0

  /// Total lines processed.
  var totalLinesProcessed: Int64 = 0

  /// Execution time in seconds.
  var execTime: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stats_Store {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The total of chunk reference fetched from index.
  var totalChunksRef: Int64 = 0

  /// Total number of chunks fetched.
  var totalChunksDownloaded: Int64 = 0

  /// Time spent fetching chunks in nanoseconds.
  var chunksDownloadTime: Double = 0

  /// Total bytes processed but was already in memory. (found in the headchunk)
  var headChunkBytes: Int64 = 0

  /// Total lines processed but was already in memory. (found in the headchunk)
  var headChunkLines: Int64 = 0

  /// Total bytes decompressed and processed from chunks.
  var decompressedBytes: Int64 = 0

  /// Total lines decompressed and processed from chunks.
  var decompressedLines: Int64 = 0

  /// Total bytes of compressed chunks (blocks) processed.
  var compressedBytes: Int64 = 0

  /// Total duplicates found while processing.
  var totalDuplicates: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Stats_Ingester {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Total ingester reached for this query.
  var totalReached: Int32 = 0

  /// Total of chunks matched by the query from ingesters
  var totalChunksMatched: Int64 = 0

  /// Total of batches sent from ingesters.
  var totalBatches: Int64 = 0

  /// Total lines sent by ingesters.
  var totalLinesSent: Int64 = 0

  /// Total bytes processed but was already in memory. (found in the headchunk)
  var headChunkBytes: Int64 = 0

  /// Total lines processed but was already in memory. (found in the headchunk)
  var headChunkLines: Int64 = 0

  /// Total bytes decompressed and processed from chunks.
  var decompressedBytes: Int64 = 0

  /// Total lines decompressed and processed from chunks.
  var decompressedLines: Int64 = 0

  /// Total bytes of compressed chunks (blocks) processed.
  var compressedBytes: Int64 = 0

  /// Total duplicates found while processing.
  var totalDuplicates: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Stats_Result: @unchecked Sendable {}
extension Stats_Summary: @unchecked Sendable {}
extension Stats_Store: @unchecked Sendable {}
extension Stats_Ingester: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stats"

extension Stats_Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Result"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "summary"),
    2: .same(proto: "store"),
    3: .same(proto: "ingester"),
  ]

  fileprivate class _StorageClass {
    var _summary: Stats_Summary? = nil
    var _store: Stats_Store? = nil
    var _ingester: Stats_Ingester? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _summary = source._summary
      _store = source._store
      _ingester = source._ingester
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._summary) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._store) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._ingester) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._summary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._store {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._ingester {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stats_Result, rhs: Stats_Result) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._store != rhs_storage._store {return false}
        if _storage._ingester != rhs_storage._ingester {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stats_Summary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Summary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bytesProcessedPerSecond"),
    2: .same(proto: "linesProcessedPerSecond"),
    3: .same(proto: "totalBytesProcessed"),
    4: .same(proto: "totalLinesProcessed"),
    5: .same(proto: "execTime"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.bytesProcessedPerSecond) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.linesProcessedPerSecond) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.totalBytesProcessed) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.totalLinesProcessed) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self.execTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.bytesProcessedPerSecond != 0 {
      try visitor.visitSingularInt64Field(value: self.bytesProcessedPerSecond, fieldNumber: 1)
    }
    if self.linesProcessedPerSecond != 0 {
      try visitor.visitSingularInt64Field(value: self.linesProcessedPerSecond, fieldNumber: 2)
    }
    if self.totalBytesProcessed != 0 {
      try visitor.visitSingularInt64Field(value: self.totalBytesProcessed, fieldNumber: 3)
    }
    if self.totalLinesProcessed != 0 {
      try visitor.visitSingularInt64Field(value: self.totalLinesProcessed, fieldNumber: 4)
    }
    if self.execTime != 0 {
      try visitor.visitSingularDoubleField(value: self.execTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stats_Summary, rhs: Stats_Summary) -> Bool {
    if lhs.bytesProcessedPerSecond != rhs.bytesProcessedPerSecond {return false}
    if lhs.linesProcessedPerSecond != rhs.linesProcessedPerSecond {return false}
    if lhs.totalBytesProcessed != rhs.totalBytesProcessed {return false}
    if lhs.totalLinesProcessed != rhs.totalLinesProcessed {return false}
    if lhs.execTime != rhs.execTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stats_Store: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Store"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "totalChunksRef"),
    2: .same(proto: "totalChunksDownloaded"),
    3: .same(proto: "chunksDownloadTime"),
    4: .same(proto: "headChunkBytes"),
    5: .same(proto: "headChunkLines"),
    6: .same(proto: "decompressedBytes"),
    7: .same(proto: "decompressedLines"),
    8: .same(proto: "compressedBytes"),
    9: .same(proto: "totalDuplicates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.totalChunksRef) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.totalChunksDownloaded) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self.chunksDownloadTime) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.headChunkBytes) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.headChunkLines) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.decompressedBytes) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.decompressedLines) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.compressedBytes) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.totalDuplicates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalChunksRef != 0 {
      try visitor.visitSingularInt64Field(value: self.totalChunksRef, fieldNumber: 1)
    }
    if self.totalChunksDownloaded != 0 {
      try visitor.visitSingularInt64Field(value: self.totalChunksDownloaded, fieldNumber: 2)
    }
    if self.chunksDownloadTime != 0 {
      try visitor.visitSingularDoubleField(value: self.chunksDownloadTime, fieldNumber: 3)
    }
    if self.headChunkBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.headChunkBytes, fieldNumber: 4)
    }
    if self.headChunkLines != 0 {
      try visitor.visitSingularInt64Field(value: self.headChunkLines, fieldNumber: 5)
    }
    if self.decompressedBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.decompressedBytes, fieldNumber: 6)
    }
    if self.decompressedLines != 0 {
      try visitor.visitSingularInt64Field(value: self.decompressedLines, fieldNumber: 7)
    }
    if self.compressedBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.compressedBytes, fieldNumber: 8)
    }
    if self.totalDuplicates != 0 {
      try visitor.visitSingularInt64Field(value: self.totalDuplicates, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stats_Store, rhs: Stats_Store) -> Bool {
    if lhs.totalChunksRef != rhs.totalChunksRef {return false}
    if lhs.totalChunksDownloaded != rhs.totalChunksDownloaded {return false}
    if lhs.chunksDownloadTime != rhs.chunksDownloadTime {return false}
    if lhs.headChunkBytes != rhs.headChunkBytes {return false}
    if lhs.headChunkLines != rhs.headChunkLines {return false}
    if lhs.decompressedBytes != rhs.decompressedBytes {return false}
    if lhs.decompressedLines != rhs.decompressedLines {return false}
    if lhs.compressedBytes != rhs.compressedBytes {return false}
    if lhs.totalDuplicates != rhs.totalDuplicates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Stats_Ingester: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Ingester"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "totalReached"),
    2: .same(proto: "totalChunksMatched"),
    3: .same(proto: "totalBatches"),
    4: .same(proto: "totalLinesSent"),
    5: .same(proto: "headChunkBytes"),
    6: .same(proto: "headChunkLines"),
    7: .same(proto: "decompressedBytes"),
    8: .same(proto: "decompressedLines"),
    9: .same(proto: "compressedBytes"),
    10: .same(proto: "totalDuplicates"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.totalReached) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self.totalChunksMatched) }()
      case 3: try { try decoder.decodeSingularInt64Field(value: &self.totalBatches) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self.totalLinesSent) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.headChunkBytes) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.headChunkLines) }()
      case 7: try { try decoder.decodeSingularInt64Field(value: &self.decompressedBytes) }()
      case 8: try { try decoder.decodeSingularInt64Field(value: &self.decompressedLines) }()
      case 9: try { try decoder.decodeSingularInt64Field(value: &self.compressedBytes) }()
      case 10: try { try decoder.decodeSingularInt64Field(value: &self.totalDuplicates) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.totalReached != 0 {
      try visitor.visitSingularInt32Field(value: self.totalReached, fieldNumber: 1)
    }
    if self.totalChunksMatched != 0 {
      try visitor.visitSingularInt64Field(value: self.totalChunksMatched, fieldNumber: 2)
    }
    if self.totalBatches != 0 {
      try visitor.visitSingularInt64Field(value: self.totalBatches, fieldNumber: 3)
    }
    if self.totalLinesSent != 0 {
      try visitor.visitSingularInt64Field(value: self.totalLinesSent, fieldNumber: 4)
    }
    if self.headChunkBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.headChunkBytes, fieldNumber: 5)
    }
    if self.headChunkLines != 0 {
      try visitor.visitSingularInt64Field(value: self.headChunkLines, fieldNumber: 6)
    }
    if self.decompressedBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.decompressedBytes, fieldNumber: 7)
    }
    if self.decompressedLines != 0 {
      try visitor.visitSingularInt64Field(value: self.decompressedLines, fieldNumber: 8)
    }
    if self.compressedBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.compressedBytes, fieldNumber: 9)
    }
    if self.totalDuplicates != 0 {
      try visitor.visitSingularInt64Field(value: self.totalDuplicates, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Stats_Ingester, rhs: Stats_Ingester) -> Bool {
    if lhs.totalReached != rhs.totalReached {return false}
    if lhs.totalChunksMatched != rhs.totalChunksMatched {return false}
    if lhs.totalBatches != rhs.totalBatches {return false}
    if lhs.totalLinesSent != rhs.totalLinesSent {return false}
    if lhs.headChunkBytes != rhs.headChunkBytes {return false}
    if lhs.headChunkLines != rhs.headChunkLines {return false}
    if lhs.decompressedBytes != rhs.decompressedBytes {return false}
    if lhs.decompressedLines != rhs.decompressedLines {return false}
    if lhs.compressedBytes != rhs.compressedBytes {return false}
    if lhs.totalDuplicates != rhs.totalDuplicates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
